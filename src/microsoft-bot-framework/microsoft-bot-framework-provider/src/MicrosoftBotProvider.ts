import { Internal } from '@fusebit-int/framework';
import { BotFrameworkAdapter, TurnContext, WebRequest, WebResponse } from 'botbuilder';

type FusebitBotFrameworkAdapter = BotFrameworkAdapter & { fusebit?: any };

export default class MicrosoftBotProvider extends Internal.ProviderActivator<FusebitBotFrameworkAdapter> {
  /*
   * This function will create an authorized wrapper of the BotFrameworkAdapter client.
   */
  public async instantiate(ctx: Internal.Types.Context): Promise<FusebitBotFrameworkAdapter> {
    const { credentials } = ctx.req.body.data;

    const botFrameworkAdapter = new BotFrameworkAdapter({
      appId: credentials.botClientId,
      appPassword: 'this-is-not-a-real-or-needed-secret-as-we-bypass-it',
    }) as FusebitBotFrameworkAdapter;

    const botFrameworkAdapterBypass = botFrameworkAdapter as any;
    botFrameworkAdapterBypass.credentials.authenticationContext._cache._entries.push({
      _clientId: credentials.botClientId,
      accessToken: credentials.accessToken,
      expiresOn: new Date(2999, 11, 30),
      resource: 'https://api.botframework.com',
      _authority: 'https://login.microsoftonline.com/botframework.com',
    });

    const originalProcessActivity = botFrameworkAdapter.processActivity.bind(botFrameworkAdapter);
    botFrameworkAdapter.processActivity = async (
      req: WebRequest,
      res: WebResponse,
      logic: (context: TurnContext) => Promise<any>
    ): Promise<void> => {
      // The botbuilder SDK expects the body to contain the original event so, if we don't change it here,
      // we would actually be passing a body that contains Fusebit properties and some credentials
      // generated by the MS Bot Framework Connector. Apart from that, botbuilder also expects req.headers
      // to have the bearer token sent by their services so that it has a chance to verify the sender.
      const originalBody = req.body;
      const originalHeaders = req.headers;
      req.body = originalBody.data.event;
      req.headers.authorization = originalBody.data.credentials.verificationHeader;

      const originalLogic = logic.bind(logic);
      const wrappedLogic = async (context: TurnContext) => {
        req.body = originalBody;
        req.headers = originalHeaders;
        return originalLogic(context);
      };

      await originalProcessActivity(req, res, wrappedLogic);

      req.body = originalBody;
      req.headers = originalHeaders;
    };

    return botFrameworkAdapter;
  }
}
